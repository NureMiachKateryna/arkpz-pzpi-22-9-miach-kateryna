МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ










ЗВІТ
з практичної роботи
з дисципліни  «Аналіз та рефакторинг коду»
на тему : «Правила оформлення програмного коду JavaScript»








Виконала:					        	Перевірив:

ст. гр. ПЗПІ-22-9                                        	Сокорчук Ігор Петрович
М'яч Катерина Олександрівна                 












Харків 2024
1 ПРАВИЛА ОФОРМЛЕННЯ ПРОГРАМНОГО КОДУ JAVASCRIPT
1.1 Мета роботи

Ознайомлення з принципами та стандартами, що сприяють створенню чистого, читабельного та підтримуваного коду. Робота має на меті вивчення рекомендацій написання JavaScript коду, які допомагають мінімізувати кількість помилок, підвищити безпеку та продуктивність програм, а також зробити код легким для розуміння й модифікації іншими розробниками.

1.2 Посилання на YouTube:

https://youtu.be/033dOZ75L8c

1.3 Основні рекомендації для написання коду

JavaScript - це потужна мова програмування, яка дозволяє розробникам створювати динамічні та інтерактивні веб-додатки. Однак неефективний код може призвести до повільного завантаження сторінок, несприйнятливого користувацького інтерфейсу та підвищеного споживання ресурсів. Дотримуючись найкращих практик, розробники можуть оптимізувати свій JavaScript код і створювати високопродуктивні додатки.
Усі наведені правила оформлення коду базуються на офіційних і загальновизнаних документаціях для JavaScript, зокрема:
•	Airbnb JavaScript Style Guide – широко використовуваний стандарт, що охоплює найкращі практики оформлення та організації коду в JavaScript.
•	Google JavaScript Style Guide – гайд від Google, який забезпечує чіткі рекомендації щодо написання чистого, структурованого коду.
1) Використання const і let замість var

У сучасному JavaScript стандартом є використання const для значень, які не змінюються, і let для змінних, які можуть змінюватися. var застаріло через функціональну область видимості та можливість виникнення логічних помилок, особливо у циклах та умовних конструкціях.
Неправильно:
var userName = "Kate";
var userAge = 19;
var isActive = true;
Правильно:
const userName = "Kate";
let userAge = 19;
const isActive = true;

2) Використання фігурних дужок для блоку if, else, for, while

Завжди використовуйте фігурні дужки { } для будь-якого блоку коду, навіть якщо він складається з одного рядка. Це підвищує читабельність і зменшує ймовірність помилок при додаванні нових рядків. Якщо блок без дужок, додавання нового рядка або умовного блоку може спричинити помилки, які складно виявити.






Неправильно:
if (userAge > 18) console.log("Доступ дозволений");
else console.log("Доступ заборонений");
Правильно:
if (userAge > 18) {
    console.log("Доступ дозволений");
} else {
    console.log("Доступ заборонений");
}

3) Ліміт довжини рядка

Для підтримання читабельності та зручності роботи з кодом на різних екранах рекомендується обмежувати довжину рядка до 80-100 символів. Це спрощує навігацію по коду та знижує навантаження на зір при читанні довгих рядків. Якщо рядок занадто довгий, його варто розбити на кілька частин, використовуючи шаблонні рядки або оператор +.
Неправильно:
const description = "Це дуже довгий рядок, який перевищує стандартний ліміт символів у 80 або 100, і такий рядок важко прочитати.";
Правильно:
const description = "Це дуже довгий рядок, який не перевищує ліміт символів. " +
    "Складається з декількох рядків для кращого читання.";




4) Використання шаблонних рядків замість конкатенації

Шаблонні рядки, що використовуються через зворотні лапки `, дозволяють легко вставляти змінні всередину рядка за допомогою ${} і полегшують зчитування коду. Це знижує ризик помилок через зайві знаки + і спрощує написання довгих рядків, що включають динамічні значення. Конкатенація ж може зробити код громіздким та менш зрозумілим.
Неправильно:
const greeting = "Hello, " + userName + "! You are " + userAge + " years old."; 
Правильно:
const greeting = `Hello, ${userName}! You are ${userAge} years old.`;

5) Конвенції іменування для змінних, функцій та класів

Для створення зрозумілої структури в коді важливо дотримуватися єдиного стилю іменування. У JavaScript зазвичай використовують camelCase для змінних і функцій та PascalCase для класів. Це спрощує розуміння коду і робить структуру проєкту передбачуваною, що особливо важливо для командної роботи.









Неправильно:
var user_name = "Kate";
function get_user_Age() {
    return user_name;
}
Правильно:
const userName = "Kate";
function getUserAge() {
    return userName;
}

6) Використання крапок з комою

Завершуйте кожен оператор крапкою з комою для уникнення можливих помилок, пов'язаних з автоматичним додаванням крапок з комою. Завершення операторів крапками з комою також робить код більш стабільним і передбачуваним.
Неправильно:
const name = "Kate"
console.log(name)
Правильно:
const name = "Kate";
console.log(name);

7) Використання стрілкових функцій

Стрілкові функції дозволяють скоротити синтаксис, особливо для анонімних функцій, і зберігають значення контексту this з місця їх створення. Це допомагає уникнути проблем із контекстом, що важливо для функцій зворотного виклику. Стрілкові функції є компактнішими та більш зручними для коротких функцій, таких як обробники подій.
Неправильно:
const getAge = function() {
  return userAge;
};
Правильно:
const getAge = () => userAge;

8) Уникайте використання eval()

eval() виконує код, переданий у вигляді рядка, що несе серйозні ризики безпеки, оскільки може дозволити виконання довільного коду. Це також впливає на продуктивність, тому використання eval() слід уникати в усіх можливих випадках. Більшість завдань, які вирішуються з eval(), можна виконати іншими, більш безпечними способами.
Неправильно:
const result = eval("2 + 2");
Правильно:
const result = 2 + 2;

9) Використання пробілів для покращення читабельності

Додавайте пробіли навколо операторів і всередині круглих дужок, щоб підвищити читабельність коду. Розташування пробілів робить код структурованим, знижує візуальне навантаження і спрощує сприйняття складних виразів. Це особливо важливо при роботі з великими файлами або складними умовами.
Неправильно:
for(let i=0;i<5;i++){console.log(i);}
Правильно:
for (let i = 0; i < 5; i++) {
    console.log(i);
}

10) Один порожній рядок між функціями та класами

Додавання одного порожнього рядка між функціями та класами допомагає візуально відділяти логічні блоки коду, полегшуючи його читання та сприйняття. Це надає коду структурованості та полегшує навігацію по ньому, особливо у великих файлах.













Неправильно:
function greet() {
  console.log("Hello!");
}
function farewell() {
  console.log("Goodbye!");
}
Правильно:
function greet() {
  console.log("Hello!");
}

function farewell() {
  console.log("Goodbye!");
}

1.4 Висновки

Дотримання стандартів оформлення JavaScript-коду покращує читабельність, підтримуваність і стабільність програм. Впровадження єдиного стилю написання коду, як рекомендують Airbnb та Google JavaScript Style Guides, дозволяє команді швидко орієнтуватися в кодовій базі, знижує кількість помилок і підвищує продуктивність розробки. Використання const і let замість var, шаблонних рядків, чіткого іменування, пробілів і дужок створює чистий, зрозумілий та надійний код, готовий до командної роботи та подальшого розширення.


ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

1. Airbnb JavaScript Style Guide - Reviews URL: https://airbnb.io/javascript/react/ (дата звернення: 02.11.2024).
2. Google JavaScript Style Guide - Reviews URL: https://google.github.io/styleguide/jsguide.html (дата звернення: 02.11.2024).
3. Standard JS - Reviews URL: https://github.com/standard (дата звернення: 02.11.2024).


















ДОДАТОК А
Скриншоти слайдів презентації

  
Рисунок А.1 – Титульний слайд 
  
Рисунок А.2 – Вступ
 
Рисунок А.3 – Використання const і let замість var
 
Рисунок А.4 – Використання фігурних дужок для блоку if, else, for, while

 
Рисунок А.5 – Ліміт довжини рядка
 
Рисунок А.6 – Використання шаблонних рядків замість конкатенації

 
Рисунок А.7 – Конвенції іменування для змінних, функцій та класів
 
Рисунок А.8 – Використання крапок з комою

 
Рисунок А.9 – Використання стрілкових функцій
 
Рисунок А.10 – Уникайте використання eval()

 
Рисунок А.11 – Використання пробілів для покращення читабельності
 
Рисунок А.12 – Один порожній рядок між функціями та класами

 
Рисунок А.13 – Висновки
 
Рисунок А.14 – Список використаних джерел
