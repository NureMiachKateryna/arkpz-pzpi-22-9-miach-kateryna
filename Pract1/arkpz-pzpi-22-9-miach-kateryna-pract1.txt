МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ










ЗВІТ
з практичної роботи
з дисципліни  «Аналіз та рефакторінг коду»
на тему : «Правила оформлення програмного коду JavaScript»








Виконала:					        	Перевірив:

ст. гр. ПЗПІ-22-9                                        	Сокорчук Ігор Петрович
М`яч Катерина Олександрівна                 












Харків 2024
1.1 Мета роботи

Ознайомлення з принципами та стандартами, що сприяють створенню чистого, читабельного та підтримуваного коду. Робота має на меті вивчення рекомендацій написання JavaScript коду, які допомагають мінімізувати кількість помилок, підвищити безпеку та продуктивність програм, а також зробити код легким для розуміння й модифікації іншими розробниками.

1.2 Посилання на GitHub:

https://github.com/NureMiachKateryna/arkpz-pzpi-22-9-miach-kateryna/blob/main/Pract1

1.3 Основні рекомендації для написання коду

JavaScript - це потужна мова програмування, яка дозволяє розробникам створювати динамічні та інтерактивні веб-додатки. Однак неефективний код може призвести до повільного завантаження сторінок, несприйнятливого користувацького інтерфейсу та підвищеного споживання ресурсів. Дотримуючись найкращих практик, розробники можуть оптимізувати свій JavaScript код і створювати високопродуктивні додатки.

1)	Використання стрілочних функцій

Скорочений спосіб створення функцій у JavaScript. Вони спрощують код, зменшуючи кількість шаблонів, необхідних для визначення функції.
Крім того, що функції зі стрілками мають коротший синтаксис, вони можуть зробити код стисліше, легшим для читання і менш схильним до помилок. Це робить їх кращим вибором, ніж використання ключового слова функції. 
# Приклад неформатованого коду:
function greeings(username){ 
console.log(Hello, ${username}!);
		}
# Код після форматування:
		const greet = username => console.log(`Hello, ${username}!`);

2)	Використовуйте функціональне програмування

Це надає перевагу використанню чистих функцій та незмінних структур даних. Використання методів функціонального програмування може допомогти значно спростити код і зменшити ризик помилок та побічних ефектів.

Використання оператора розповсюдження (spread) допомагає запобігти неочікуваним побічним ефектам і робить код більш передбачуваним. Коли ви змінюєте функцію на місці, ви змінюєте вихідний масив або об'єкт, якщо інша частина вашого коду покладається на цей масив або об'єкт, то це може призвести до помилок і неочікуваної поведінки.

З іншого боку, використання оператора розповсюдження створює новий масив або об'єкт, залишаючи оригінал недоторканим. Це робить ваш код більш передбачуваним і легшим для міркувань. 
# Приклад неформатованого коду:
          		const values = [1, 2, 3];
		values.push(4);

# Код після форматування:
		const values = [1, 2, 3];
		const updatedValues = [...values, 4];

3)	Уникайте вкладеного коду

Вкладеність коду може ускладнити його читання та розуміння. Кращий спосіб - спробувати максимально спростити код. Ви можете зробити це за допомогою раннього повернення, тернарних операторів та композиції функцій.
Використання раннього повернення робить наш код більш читабельним і зрозумілим, оскільки він розбиває кожну умову на окремий оператор if і повертається раніше, якщо якась умова не виконується. Раннє повернення також може підвищити ефективність вашого коду, запобігаючи непотрібним обчисленням. 
# Приклад неформатованого коду:
	if (isConditionA) {
  if (isConditionB) {
    // код
  }
		}
# Код після форматування:
	if (isConditionA) {
  return;
}
if (isConditionB) {
  return;
}
		// код
4)	Використання параметрів за замовчуванням

Це дозволяє вказати значення за замовчуванням для параметра функції. Може спростити ваш код, зменшивши кількість умовних операторів, які вам потрібно написати.

Використання параметра за замовчуванням надає вам простий спосіб встановити значення за замовчуванням. Але не тільки, це робить ваш код більш гнучким, менш схильним до помилок, а також полегшує його розуміння. 
# Приклад неформатованого коду:
	function sayHello(personName) {
  if (!personName) {
    personName = 'Friend';
  }
  console.log(`Hello, ${personName}!`);
		}
# Код після форматування:
function sayHello(personName = 'Friend') {
  console.log(`Hello, ${personName}!`);
}

5)	Використання деструктуризації

Деструктуризація дозволяє витягувати значення з масивів та об'єктів і присвоювати їх змінним. Це може зробити ваш код більш лаконічним і легшим для читання.

Використання деструктуризації набагато краще, ніж доступ до властивостей об'єктів, оскільки вона допомагає швидко зрозуміти призначення коду, особливо при роботі зі складними структурами даних. Це також допомагає зменшити кількість коду, який потрібно написати, забезпечує гнучкість, призводить до більш чистого коду, а також допомагає уникнути конфліктів імен. 
# Приклад неформатованого коду:
	const user = { name: 'Kate', age: 19 };
const userName = user.name;
		const userAge = user.age;
# Код після форматування:
		const { userName, userAge } = { name: 'Kate', age: 19 };

6)	Використовуйте Promises

Promises дозволяють писати асинхронний код читабельніше та передбачуваніше. Вони допомагають уникати вкладених зворотних викликів (callback) та об’єднувати асинхронні операції у ланцюг.

Використання promise замість вкладених зворотних викликів може зробити код лаконічнішим і легшим для читання, особливо при роботі зі складними асинхронними операціями.
# Приклад неформатованого коду: 
function fetchUserData(userId, callback) {
  fetchUser(userId, function(user) {
    fetchPosts(user, function(posts) {
      fetchComments(posts, function(comments) {
        callback(comments);
      });
    });
  });
		}
# Код після форматування:
	function fetchUserData(userId) {
  return fetchUser(userId)
    .then(user => fetchPosts(user))
    .then(posts => fetchComments(posts));
		}

7)	Використання методів роботи з масивами

JavaScript має багато вбудованих методів для маніпулювання масивами, таких як map, filter, reduce та forEach. Використання цих методів може зробити ваш код більш лаконічним і легшим для читання.

Використання методів масивів замість традиційних для циклів може зробити ваш код більш стислим, читабельним і модульним, а також забезпечити кращу обробку помилок і підтримку функціональних методів програмування. 
# Приклад неформатованого коду:
	const array = [1, 2, 3];
for (let index = 0; index < array.length; i++) {
  console.log(array[index]);
	}
# Код після форматування:
		const array = [1, 2, 3];
		array.forEach(array => console.log(array));

8)	Використання методів об'єктів

Об'єкти JavaScript мають різноманітні вбудовані методи, такі як Object.keys, Object.values та Object.entries. Ці методи можуть спростити ваш код, зменшивши потребу в циклах та умовних операторах.

Так само, як і методи масивів, використання методів об'єктів може зробити ваш код більш стислим, читабельним і модульним. 
# Приклад неформатованого коду:
	const individual = { name: 'Kate', age: 19 };
for (const property in individual) {
  console.log(`${property}: ${individual[property]}`);
		}
# Код після форматування:
		const individual = { name: 'Kate', age: 19 };
		Object.entries(individual).forEach(([property, value]) => 					console.log(`${property}: ${value}`));

9)	Дотримуйтесь принципу DRY (Don't Repeat Yourself)

Уникайте дублювання коду. Якщо ви помітили, що пишете один і той самий код у різних місцях, подумайте про те, щоб перенести його у функцію або клас. Дублювання ускладнює внесення змін та збільшує ризик помилок. Якщо потрібно внести зміни, доведеться модифікувати код у кількох місцях. Недотримання принципу може призвести до заплутаного коду і ускладнити його підтримку в майбутньому. 


# Приклад неформатованого коду:
	function calculateAreaOfCircle(radius) {
    return Math.PI * radius * radius;
}

function calculateVolumeOfCylinder(radius, height) {
    return Math.PI * radius * radius * height;
		}
# Код після форматування:
	function calculateAreaOfCircle(radius) {
    return Math.PI * radius * radius;
}

function calculateVolumeOfCylinder(radius, height) {
    return calculateAreaOfCircle(radius) * height;
		}

1.3 Висновки

Написання ефективного JavaScript-коду має вирішальне значення для створення високопродуктивних веб-додатків. Дотримання найкращих практик написання JavaScript коду, таких як використання сучасного синтаксису, уникнення дублювання коду (DRY), і функціональний підхід, значно підвищує ефективність та надійність програм. Використання Promises, методів масивів та деструктуризації робить код більш чистим, передбачуваним та легшим для підтримки. Ці рекомендації допомагають не тільки уникати помилок, але й роблять код зрозумілим для інших розробників, що підвищує його підтримуваність у майбутньому.
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

1. Freecodecamp - Reviews URL: https://www.freecodecamp.org/news/simplify-javascript-code/ (дата звернення: 11.09.2024).
2. Dev.to - Reviews URL: https://dev.to/codewithshahmeer/best-practices-for-writing-efficient-javascript-code-160p (дата звернення: 11.09.2024).
3. Coding-by-michael - Reviews URL: https://www.coding-by-michael.com/best-practices-for-writing-clean-javascript-code/ (дата звернення: 11.09.2024).
















ДОДАТОК А
Скриншоти слайдів презентації

                         

