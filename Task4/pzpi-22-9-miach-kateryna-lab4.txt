МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ










ЗВІТ
з лабораторної роботи
з дисципліни  «Аналіз та рефакторінг коду»
на тему : «РОЗРОБКА IoT КЛІЄНТА 
(БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ НАЛАШТУВАННЯ)»








Виконала:					        	Перевірив:

ст. гр. ПЗПІ-22-9                                        	Дашенков Дмитро Сергійович
М`яч Катерина Олександрівна                 











Харків 2024
1.1 Мета роботи

Розробити програмне забезпечення для  IoT або SmartDevice пристрою, створеного на базі будь-якої поширеної на  сьогодні платформи, придатної для реалізації вбудованих систем (Embedded  System). 

1.2 Хід роботи

1. Розробити будову програмного забезпечення ІоТ клієнта.
1)	Модуль збору даних (Data Acquisition Module):
•	Збирає дані з сенсорів (температура, рівень заповнення меду).
•	Виконує базову валідацію отриманих даних (наприклад, перевірку на допустимі межі значень).
•	Дані можуть бути отримані через інтерфейси, наприклад, аналогові входи для температури (TMP36) або цифрові піні для ультразвукового датчика..
2)	Модуль обробки даних (Data Processing Module):
•	Контроль температури: перевірка, чи температура знаходиться в межах допустимих значень (20-30°C).
•	Розрахунок рівня заповнення: якщо відстань до поверхні меду на ультразвуковому датчику менше 10 см, то бочка майже порожня, якщо більше 300 см — переповнена.
•	Генерація подій: у разі перевищення температури або досягнення критичних рівнів заповнення бочки, система генерує попередження і виводить відповідні повідомлення на монітор.
3)	Модуль комунікації (Communication Module):
•	Передача даних: дані температури та рівня заповнення надсилаються на сервер через HTTP POST або GET запит.
•	Отримання налаштувань: модуль також отримує оновлені налаштування від сервера (наприклад, зміна граничних температур).
4)	Модуль конфігурації (Configuration Module):
•	Граничні значення температури: встановлюються мінімальні та максимальні значення температури, за яких система генерує попередження.
•	Інтервал збору даних: інтервал, з яким система збирає дані з сенсорів та передає їх на сервер, наприклад, кожні 10 секунд.
•	Можливість зміни налаштувань: налаштування можуть бути змінені через веб-інтерфейс або мобільний додаток користувача.
5)	Система живлення (Power Management System):
•	Якщо система працює від батареї, вона постійно контролює рівень заряду та попереджає про необхідність підзарядки.
•	Для зменшення енергоспоживання система може переходити в енергозберігаючий режим, вимикаючи сенсори, коли вони не використовуються.
6)	Модуль безпеки (Security Module):
•	Для захисту переданих даних застосовується шифрування, щоб уникнути їх перехоплення чи змін під час передачі.
•	Модуль підтримує аутентифікацію для встановлення захищеного з’єднання між IoT-клієнтом і сервером, щоб запобігти несанкціонованому доступу.
        
2. Створити UML діаграму прецедентів для ІоТ клієнта.
  Рисунок 1 – UML діаграма прецедентів для ІоТ клієнта

3. Розробити бізнес логіку (математичну обробку повʼязаних із предметною областю даних) та функції налаштування ІоТ клієнта.
          Бізнес-логіка IoT-клієнта:
1)	Контроль температури:
•	Математична обробка температури за допомогою сенсора TMP36. Вона зчитується та перетворюється на температуру в градусах Цельсія. Потім перевіряється, чи знаходиться температура в допустимих межах (між мінімальним і максимальним значеннями).
// Зчитування даних із датчика TMP36 (температура)
  int analogValue = analogRead(TMP_PIN);   // Читання аналогового значення
  temperature = (analogValue * 5.0 / 1023.0 - 0.5) * 100;  // Перетворення на °C для TMP36

// Генерація повідомлень за температурою
  if (temperature < minTemp) {
    Serial.println("Temperature is below the minimum limit!");
  } else if (temperature > maxTemp) {
    Serial.println("Temperature is above the maximum limit!");
  }
•	Якщо температура нижча за мінімальне значення або вища за максимальне, генерується відповідне повідомлення про перевищення меж.
2)	Розрахунок рівня заповнення:
•	Вимірюється відстань до поверхні рідини за допомогою ультразвукового датчика HC-SR04. Якщо відстань менша за 10 см, то рівень заповнення вважається низьким. Якщо відстань більша за 300 см — рівень заповнення вищий за межу.
// Ультразвуковий датчик HC-SR04 для вимірювання відстані
  digitalWrite(TRIGGER_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIGGER_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN, LOW);
  duration = pulseIn(ECHO_PIN, HIGH);

// Перевірка на успішність виміру
  if (duration == 0) {
    Serial.println("No echo received from HC-SR04");
  } else {
    // Розрахунок відстані см
    distance = duration * 0.034 / 2;

// Генерація повідомлень за рівнем заповнення
      if (distance < almostEmptyLevel) {  // Бочка майже порожня, якщо відстань менша за 10 см
        Serial.println("Warning: The container is almost empty!");
      } else if (distance > overflowLevel) {  // Бочка переповнена, якщо відстань більша за 300 см
        Serial.println("Warning: The container is overflowed!");
      }
•	Використовується ультразвуковий датчик, щоб відстежувати відстань до меду та генерувати сповіщення, якщо рівень досягає критичних значень.
           Функції налаштування IoT-клієнта:
1)	Граничні значення температури:
•	Для ефективного контролю температури важливо налаштувати мінімальні та максимальні межі, в межах яких температура повинна залишатися стабільною. Якщо температура виходить за ці межі, система повинна генерувати сповіщення, щоб попередити користувача про можливі проблеми. Цей параметр є критичним для сфер, де температура має визначене значення для безпеки чи якості продукції (наприклад, при зберіганні меду чи інших чутливих до температури продуктів).
2)	Інтервал передачі даних:
•	Це налаштування визначає, як часто система буде передавати дані на сервер або інші підключені пристрої. Якщо інтервал передачі даних встановлений кожні 10 секунд, то система повинна працювати з високою частотою оновлення даних. Це дає змогу оперативно реагувати на зміни середовища, наприклад, в разі зміни температури або рівня заповнення. Така частота передачі даних може бути корисною в ситуаціях, де потрібно отримувати актуальну інформацію для швидкого реагування або прийняття рішень.
3)	Управління сенсорами:
•	Система повинна мати можливість вмикати та вимикати сенсори в залежності від поточних потреб. Наприклад, якщо сенсори не використовуються в певний час, їх можна вимкнути для збереження енергії. Це може бути особливо корисно для мобільних або автономних пристроїв, де обмеження енергоспоживання є важливим аспектом. Важливо, щоб ці налаштування могли змінюватися через інтерфейс, зручно для користувача.



4. Створити діаграму діяльності для ІоТ клієнта.
 
Рисунок 2 – UML діаграма діяльності для ІоТ клієнта

5. Створити програмну реалізацію бізнес логіки та функцій налаштування ІоТ клієнта.
Реалізація бізнес-логіки та налаштувань IoT клієнта в симуляторі Tinkercad. Використано Arduino UNO, датчик температури TMP36 для вимірювання температури в межах допустимих значень та ультразвуковий датчик HC-SR04 для визначення рівня заповнення бочки. Код включає функціональність для зчитування даних, перевірки на допустимі межі значень температури та рівня заповнення, а також для управління роботою сенсорів через програмні налаштування.
 
Рисунок 3 – Схема підключення датчиків температури (TMP36) та рівня заповнення (HC-SR04) до мікроконтролера Arduino UNO для реалізації бізнес-логіки IoT клієнта
                Код:
#define TRIGGER_PIN 6     
#define ECHO_PIN 7        
#define TMP_PIN A0        

long duration;
int distance;

float temperature;
float minTemp = 20.0;  // Мінімальна температура
float maxTemp = 30.0;  // Максимальна температура

// Межі для рівня заповнення бочки (см)
int almostEmptyLevel = 10;    // Бочка майже порожня, якщо рівень менше 10 см
int overflowLevel = 300;      // Бочка переповнена, якщо рівень більше 300 см

// Змінні для управління сенсорами
bool sensorEnabled = true; // Змінна для вмикання/вимикання сенсорів

void setup() {
  Serial.begin(9600);

  // Ініціалізація пінів для HC-SR04
  pinMode(TRIGGER_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
}

void loop() {
  // Перевірка, чи сенсори включені
  if (sensorEnabled) {
    // Зчитування даних із датчика TMP36 (температура)
    int analogValue = analogRead(TMP_PIN);   // Читання аналогового значення
    temperature = (analogValue * 5.0 / 1023.0 - 0.5) * 100;  // Перетворення на °C для TMP36

    // Генерація повідомлень за температурою
    if (temperature < minTemp) {
      Serial.println("Temperature is below the minimum limit!");
    } else if (temperature > maxTemp) {
      Serial.println("Temperature is above the maximum limit!");
    }

    // Ультразвуковий датчик HC-SR04 для вимірювання відстані
    digitalWrite(TRIGGER_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIGGER_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIGGER_PIN, LOW);
    duration = pulseIn(ECHO_PIN, HIGH);

    // Перевірка на успішність виміру
    if (duration == 0) {
      Serial.println("No echo received from HC-SR04");
    } else {
      // Розрахунок відстані см
      distance = duration * 0.034 / 2;

      // Перевіряємо, що відстань знаходиться у допустимому діапазоні
      if (distance < 2 || distance > 400) {
        Serial.println("Invalid distance, please check the sensor.");
      } else {
        // Генерація повідомлень за рівнем заповнення
        if (distance < almostEmptyLevel) {  // Бочка майже порожня, якщо відстань менша за 10 см
          Serial.println("Warning: The container is almost empty!");
        } else if (distance > overflowLevel) {  // Бочка переповнена, якщо відстань більша за 300 см
          Serial.println("Warning: The container is overflowed!");
        }

        // Друк температури та відстані для відстеження значень
        Serial.print("Temperature: ");
        Serial.print(temperature);
        Serial.println(" *C");

        Serial.print("Distance: ");
        Serial.print(distance);
        Serial.println(" cm");
      }
    }
  } else {
    // Повідомлення, що сенсори вимкнені
    Serial.println("Sensors are off.");
  }

  delay(10000);  // Затримка 10 секунд перед наступним виміром
}

Цей код здійснює збирання даних з двох датчиків: температури (TMP36) і рівня заповнення (HC-SR04). Він перевіряє, чи знаходяться отримані значення в допустимих межах та генерує відповідні попередження при виході за ці межі.





Результати:
 
Виведення даних з сенсорів температури та рівня заповнення в серійному моніторі Arduino:
•	Попередження про температуру. Виводяться повідомлення, коли температура перевищує максимальні або мінімальні значення.
•	Попередження про рівень заповнення. Інформація про рівень заповнення контейнера. Коли відстань менша за допустимий рівень, виводиться повідомлення про майже порожній контейнер. Якщо відстань більша за максимальний рівень, виводиться повідомлення про переповнений контейнер.
