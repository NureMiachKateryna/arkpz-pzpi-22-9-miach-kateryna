МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ










ЗВІТ
з практичної роботи
з дисципліни  «Аналіз та рефакторінг коду»
на тему : «Методи рефакторингу коду програмного забезпечення на JavaScript»








Виконала:					        	Перевірив:

ст. гр. ПЗПІ-22-9                                        	Сокорчук Ігор Петрович
М`яч Катерина Олександрівна                 












Харків 2024
1 МЕТОДИ РЕФАКТОРИНГУ КОДУ ПРОГРАМНОГО        ЗАБЕЗПЕЧЕННЯ НА JAVASCRIPT
1.1 Мета роботи

Навчити студентів основним методам рефакторингу коду на основі реальних прикладів з їхніх власних програмних проєктів. Студенти повинні навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.

1.2 Посилання на YouTube

https://youtu.be/PjN-Jf2lfkc

1.3 Хід роботи

Рефакторинг коду - це процес покращення існуючого коду без зміни його зовнішньої поведінки. Метою рефакторингу є підвищення читабельності, зручності підтримки та розширення функціональності коду. У цій доповіді розглянемо три методи рефакторингу на JavaScript: Remove Control Flag, Replace Magic Number with Symbolic Constant та Encapsulate Field. Також обговоримо проблеми, які виникають при збереженні початкової версії коду, та як вони впливають на читабельність, підтримку або розширення коду.

1) Remove Control Flag

Remove Control Flag полягає у видаленні змінних-флагів, які використовуються для контролю потоку виконання програми. Замість них застосовуються більш зрозумілі та ефективні конструкції, такі як return, break або continue.
Код до рефакторингу:
function processOrders(orders) {
    let hasPending = false;
    for (let i = 0; i < orders.length; i++) {
        if (orders[i].status === 'pending') {
            hasPending = true;
        }
    }
    if (hasPending) {
        notifyUser();
    }
}
У цьому коді змінна hasPending використовується як контрольний флаг для визначення, чи є замовлення зі статусом 'pending'.
Проблеми:
-	Зайва складність. Використання контрольних флагів додає додатковий рівень складності, оскільки потрібно відстежувати стан змінної протягом виконання циклу.
-	Читабельність. Наявність змінної-флага може заплутати читача коду, особливо якщо логіка стає більш складною.
-	Підтримка. Більша кількість змінних ускладнює відстеження їхніх значень, що може призвести до помилок під час модифікації коду.
-	Ефективність. Цикл продовжує виконуватися навіть після виявлення необхідного стану, що може бути неефективним для великих масивів даних.

Ці проблеми негативно впливають на читабельність, оскільки додаткові змінні-флаги роблять код більш заплутаним і складним для розуміння. Підтримка коду стає важчою, тому що розробник має відстежувати стан змінної-флага в різних місцях коду, що підвищує ризик помилок. Розширення коду також ускладнюється, оскільки додавання нової логіки може вимагати введення ще більше флагів, що ще більше ускладнить код.
Код після рефакторингу:
function processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
        if (orders[i].status === 'pending') {
            notifyUser();
            return;
        }
    }
}
Спочатку видалили змінну hasPending та використали оператор return для негайного виходу з функції після виконання notifyUser(). Це спрощує код та зменшує кількість змінних. 
Рефакторинг спростив логіку коду, видаливши зайву змінну-флаг. Код став більш прямолінійним і легшим для розуміння, оскільки тепер одразу видно, що при знаходженні замовлення зі статусом 'pending' виконується дія та функція завершується. Це підвищує читабельність і полегшує підтримку, оскільки зменшується кількість елементів, які потрібно відстежувати. Ефективність коду також зросла, оскільки цикл переривається одразу після знаходження потрібного елемента. 
Видалення контрольних флагів спрощує логіку програми та покращує її читабельність. Використання прямих операцій return, break або continue робить код більш ефективним і зменшує ймовірність помилок, пов'язаних з некоректним встановленням або перевіркою флагів.

2) Replace Magic Number with Symbolic Constant

Replace Magic Number with Symbolic Constant передбачає заміну "магічних чисел" у коді на символічні константи з осмисленими іменами. Це підвищує зрозумілість коду та спрощує його зміну.
Код до рефакторингу:
function calculateDiscount(price) {
    return price * 0.05;
}
Тут 0.05 є "магічним числом", яке може бути незрозумілим без додаткового контексту.

Проблеми:
-	Незрозумілість. Магічні числа не дають зрозуміти, що вони означають, без додаткових коментарів або документації.
-	Підтримка. Якщо те саме число використовується в декількох місцях, зміна його значення потребує пошуку та модифікації у всіх цих місцях, що підвищує ризик помилок.
-	Розширення. Додаючи нову функціональність, розробник може не знати про існування цих магічних чисел, що призведе до дублювання коду або неконсистентності.
Магічні числа погіршують читабельність коду, оскільки неясно, що вони означають без додаткових коментарів або документації. Це ускладнює підтримку, тому що зміни в бізнес-логіці вимагають редагування всіх місць, де використовується це число, що збільшує ризик помилок. Розширення коду також ускладнюється, оскільки розробники можуть випадково дублювати магічні числа або використовувати різні значення, що призведе до неконсистентності.
Код після рефакторингу:
const DISCOUNT_RATE = 0.05;

function calculateDiscount(price) {
    return price * DISCOUNT_RATE;
}
Замінивши магічне число 0.05 на константу DISCOUNT_RATE, код став більш зрозумілим і дозволяє легко змінювати значення знижки в майбутньому. 
Рефакторинг підвищив читабельність коду, оскільки ім'я константи чітко вказує на її призначення. Це спрощує підтримку, оскільки зміни в значенні знижки можна внести в одному місці, зменшуючи ризик помилок. Розширення функціональності стає простішим, тому що константа може бути використана в інших місцях коду, забезпечуючи консистентність. 
Використання символічних констант підвищує читабельність та підтримуваність коду. Якщо потрібно змінити значення константи, достатньо внести зміни в одному місці, що зменшує ризик помилок та спрощує підтримку.

3) Encapsulate Field

Encapsulate Field полягає в тому, щоб приховати доступ до полів об'єкта, надаючи доступ через методи (геттери та сеттери). Це дозволяє контролювати доступ до даних та забезпечити їх цілісність.



Код до рефакторингу:
class Employee {
    constructor(name, salary) {
        this.name = name;
        this.salary = salary;
    }
}

const emp = new Employee('Alice', 50000);
emp.salary = -1000; // Некоректне значення
Поле salary є відкритим для прямої модифікації, що може призвести до некоректних даних.
Проблеми:
-	Відсутність контролю. Прямий доступ до полів об'єкта дозволяє встановлювати некоректні або небажані значення.
-	Цілісність даних. Немає можливості перевірити або валідувати дані перед їх встановленням.
-    Підтримка. Зміна структури даних може призвести до необхідності модифікації всіх місць, де ці поля використовуються.
Ці проблеми знижують надійність та безпеку коду, оскільки неконтрольований доступ до полів може призвести до непередбачуваної поведінки. Підтримка коду ускладнюється, тому що важко відстежувати та контролювати зміни в даних об'єкта. Розширення функціональності може вимагати значних змін у коді, оскільки немає централізованого місця для додавання нової логіки при доступі до полів.



Код після рефакторингу:
class Employee {
    constructor(name, salary) {
        this.name = name;
        let _salary = salary;

        this.getSalary = function() {
            return _salary;
        };

        this.setSalary = function(newSalary) {
            if (newSalary > 0) {
                _salary = newSalary;
            } else {
                console.error('Некоректна зарплата');
            }
        };
    }
}

const emp = new Employee('Alice', 50000);
emp.setSalary(-1000); // Виведе помилку
Інкапсулювали поле salary, зробивши його приватним за допомогою замикань, та надали доступ через методи getSalary та setSalary. У сеттері додали перевірку на коректність даних. 
Рефакторинг підвищив надійність та безпеку коду, оскільки тепер доступ до поля salary контролюється методами, які можуть виконувати валідацію даних. Це покращує підтримку коду, оскільки зміни в логіці встановлення або отримання значення можна внести в одному місці без впливу на зовнішній код. Читабельність коду також зростає, оскільки стає зрозуміло, що доступ до важливих даних відбувається через контрольовані інтерфейси. 
Інкапсуляція полів забезпечує контроль над тим, як дані встановлюються та отримуються. Це дозволяє додавати логіку перевірки, зберігаючи цілісність даних, та спрощує майбутню модифікацію класу без ризику порушити зовнішній код, який використовує цей клас.

1.4 Висновки

Рефакторинг коду є ключовим процесом для підтримання його якості та ефективності. Збереження початкової версії коду може призвести до проблем з читабельністю, підтримкою та розширенням. Застосування методів Remove Control Flag, Replace Magic Number with Symbolic Constant та Encapsulate Field допомагає вирішити ці проблеми, роблячи код більш чистим, зрозумілим та легким для підтримки. Це сприяє підвищенню продуктивності розробників та якості програмного забезпечення в цілому.



















ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

1. Refactoring Guru - Reviews URL: https://refactoring.guru/ (дата звернення: 11.11.2024).
2. You Don't Know JS Yet (book series) - Reviews URL: https://github.com/getify/You-Dont-Know-JS (дата звернення: 11.11.2024).






















ДОДАТОК А
Скриншоти слайдів презентації

 
Рисунок А.1 – Титульний слайд 
 
Рисунок А.2 – Вступ 
 
Рисунок А.3 – Remove Control Flag
 
Рисунок А.4 – Remove Control Flag - Код до рефакторингу

 
Рисунок А.5 – Remove Control Flag - Код після рефакторингу
 
Рисунок А.6 – Replace Magic Number with Symbolic Constant
 
Рисунок А.7 – Replace Magic Number - Код до та після рефакторингу
 
Рисунок А.8 – Encapsulate Field

 
Рисунок А.9 – Encapsulate Field - Код до та після рефакторингу
 
Рисунок А.10 – Висновок

 
Рисунок А.11 – Перелік джерел посилання


